ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ №  12_

1.	Контейнеризация Docker. Принципы контейнеризации. Особенности. Реализация в Linux
Что такое контейнеризация?  
Контейнеризация — это технология изоляции приложений в рамках одной операционной системы, позволяющая запускать их независимо друг от друга с минимальными накладными расходами. 
Основные принципы контейнеризации:  
    Изоляция  – каждый контейнер работает в собственном изолированном окружении.
    Портативность  – контейнеры легко переносятся между системами.
    Легковесность  – в отличие от виртуальных машин, контейнеры не эмулируют целую ОС.
    Однородность  – один и тот же контейнер работает одинаково на разных машинах.
Docker как инструмент контейнеризации  
Docker  — одна из самых популярных платформ для работы с контейнерами. Он предоставляет удобный интерфейс для создания, запуска и управления контейнерами. 
Ключевые компоненты Docker:  
    Docker Image  – шаблон (образ) для создания контейнеров.
    Docker Container  – запущенный экземпляр образа.
    Dockerfile  – текстовый файл с инструкциями для сборки образа.
    Docker Hub  – облачный репозиторий готовых образов.
Особенности контейнеризации:  
    Экономия ресурсов  – контейнеры используют ядро хостовой ОС, а не требуют отдельной виртуальной машины.
    Быстрое развёртывание  – контейнеры стартуют за секунды.
    Масштабируемость  – легко запускать десятки и сотни контейнеров.
    Изоляция процессов и сетей  – процессы в контейнере отделены от других.
Реализация контейнеризации в Linux  
Контейнеры в Linux реализованы с помощью следующих механизмов: 
1. Namespaces  
Обеспечивают изоляцию: 
    PID (процессы)
    NET (сети)
    IPC (межпроцессное взаимодействие)
    UTS (имя хоста)
    USER (пользователи)
    Монтирования (файловые системы)
2. Cgroups (Control Groups)  
Ограничивает использование ресурсов: 
    CPU
    Память
    Дисковый I/O
    Сеть
3. UnionFS / OverlayFS  
Позволяет создавать слои файловых систем, что делает образы модульными и экономичными. 
4. AppArmor / SELinux  
Обеспечивают дополнительную безопасность, ограничивая действия контейнеров. 
Преимущества использования Docker:  
    Быстрая разработка и тестирование приложений.
    Упрощённое развертывание в различных средах.
    Поддержка CI/CD (непрерывной интеграции и доставки).
    Интеграция с оркестраторами (Kubernetes, Docker Swarm).
2.	Сети VPN. Архитектура VPN-сетей. 
VPN (Virtual Private Network)  — это технология создания защищённого виртуального соединения через общедоступные сети, например, через Интернет. Она позволяет передавать данные конфиденциально и безопасно, как если бы устройства находились в одной локальной сети. 
Основные задачи VPN:  
    Обеспечение конфиденциальности данных через шифрование.
    Гарантия целостности информации при передаче.
    Аутентификация участников соединения.
    Удалённый доступ к корпоративной сети.
    Объединение филиалов в единую сеть.
    Скрытие реального IP-адреса пользователя.
Принцип работы VPN:  
    Туннелирование  — данные инкапсулируются в специальный пакет для безопасной передачи через публичную сеть.
    Шифрование  — информация шифруется с помощью алгоритмов, таких как AES, RSA, 3DES.
    Аутентификация  — проверка подлинности клиента и сервера.
    Маршрутизация  — весь трафик направляется через защищённый туннель к VPN-серверу.
Архитектуры VPN-сетей:  
1. Клиент-серверная архитектура  
    На устройстве пользователя устанавливается VPN-клиент , который подключается к центральному VPN-серверу .
    Используется для удалённого доступа сотрудников к внутренним ресурсам компании.
    Пример: сотрудник дома подключается к офисной сети через интернет.
2. Site-to-Site (сайт-ту-сайт)  
    В каждом офисе или филиале устанавливается VPN-шлюз , который создаёт защищённое соединение с другими шлюзами.
    Трафик между филиалами проходит через зашифрованный туннель.
    Позволяет объединить несколько локальных сетей в одну безопасную сеть.
    Пример: компания с несколькими офисами в разных городах.
3. Мультиточечная архитектура (Hub-and-Spoke)  
    Все филиалы или пользователи подключаются к центральному узлу (hub) .
    Центральный узел управляет маршрутизацией между филиалами.
    Подходит для компаний с головным офисом и множеством удалённых точек.
    Пример: банк с головным офисом и десятками филиалов.
4. Full Mesh (полносвязная сеть)  
    Каждый узел может напрямую подключаться к любому другому узлу через VPN.
    Создаёт гибкую и отказоустойчивую структуру.
    Сложнее в настройке и управлении.
    Применяется в крупных распределённых системах, где важна надёжность и независимость узлов.
Преимущества использования различных архитектур:  
    Безопасность  — все данные передаются через зашифрованный туннель.
    Гибкость  — можно выбрать подходящую модель в зависимости от масштаба и задач.
    Экономия  — нет необходимости в дорогих выделенных линиях связи.
    Централизованное управление  — особенно в моделях Hub-and-Spoke и Site-to-Site.
3.	Настройте DHCP-сервер:
 Установите пакет DHCP-сервера на Linux-систему.
Создайте конфигурационный файл с определением параметров сети и настроек DHCP-сервера.
Запустите DHCP-сервер и проверьте, что устройства в сети получают IP-адреса автоматически.
apt install isc-dhcp-server
Создайте конфигурационный файл с определением параметров сети и настроек DHCP-сервера.
nano /etc/default/isc-dhcp-server
INTERFACESv4=”ens4” выходим
nano /etc/dhcp/dhcpd.conf
раскоментировать authoritative
option domaın - name "au-team.irро";
option domain-name-servers 8.8.8.8; в самом низу пишем следующее:
subnet 172.16.4.0 netmask 255.255.255 240 {
range 172.16.4.2 172.16.4.10;
option routers 172.16.4.1;
} выходим
systemctl enable--now isc-dhcp-server
systemctl restart isc-dhcp-server
systemctl status isc-dhcp-server смотрим работает 
(apt update –y)
(iptables –t nat –A POSTROUTING –j MASQUERADE)
(apt install iptables-persistent -y)
(перезагрузить пк что бы интернет встал на второй комп при подключении к нему + iptables –t nat –S для проверки стоит ли построутинг и маскарад)
переводим в nmtui соединение на клиенте в automatic
 Запустите DHCP-сервер и проверьте, что устройства в сети получают IP-адреса автоматически.
  
