1.	Миграция пользовательской среды. Инструменты для миграции пользовательской среды.
Миграция пользовательской среды — это процесс переноса данных,
конфигураций и настроек с одного компьютера или сервера на другой.
Основная цель миграции — обеспечить непрерывность работы
пользователей и сохранить все их данные, настройки и конфигурации без
потери или повреждения.
Компоненты пользовательской среды
- **Домашние директории** (`/home`) – основное хранилище данных и скрытых настроек.
- **Конфигурационные файлы** – глобальные (`/etc/`) и локальные (в домашних каталогах).
- **Права доступа и владельцы** – важны для стабильной работы системы.
- **Специфические данные приложений** – например, базы данных или почтовые ящики.
- **Системные службы и зависимости** – влияют на совместимость после миграции.
#### Зачем нужна миграция?
- Обновление или замена оборудования.
- Переход на новую операционную систему.
- Реорганизация IT-инфраструктуры.
- Улучшение безопасности и производительности.
#### Основные трудности:
- Большие объёмы данных → долгая передача.
- Совместимость версий программного обеспечения.
- Сохранение прав доступа и владельцев.
- Минимизация простоев во время миграции.
- Защита данных при передаче через сеть.
#### Основные способы миграции:
1. **rsync**
   - Передаёт только изменённые части файлов.
   - Поддерживает шифрование через SSH.
   - Сохраняет права доступа, временные метки и ссылки.
   - Может возобновлять прерванную передачу.
2. **tar**
   - Архивирует данные в один файл.
   - Подходит для резервных копий и переноса на флешках.
   - Сохраняет права доступа и поддерживает сжатие.
   - Не передаёт изменения частично — нужно создавать новый архив.
3. **LVM snapshots**
   - Используется при наличии LVM.
   - Создаёт моментальный снимок файловой системы.
   - Позволяет сделать точную копию без остановки системы.
   - Часто комбинируется с rsync для передачи данных
4. **Переносимые домашние директории**
   - Данные хранятся на центральном сервере (например, через NFS).
   - Пользователь получает доступ с любого устройства.
   - Требует сетевой инфраструктуры и устойчивого соединения.
Этапы планирования миграции:
1. **Анализ текущей среды** – определить, что переносить.
2. **Выбор метода** – исходя из объёмов данных и доступных технологий.
3. **Подготовка целевой системы** – проверить место и настройки.
4. **Тестирование** – провести пробный перенос.
5. **Планирование времени** – выбрать удобный момент для минимума простоев.
6. **Резервное копирование** – защититься от возможных ошибок.
2.	Инструменты развертывания Linux. Автоматизированная установка ОС. Debootstrap.
Развертывание операционной системы — это процесс установки и настройки ОС на одном или нескольких компьютерах. 
В корпоративных средах и дата-центрах используется автоматизация для ускорения и унификации процесса. 
Задачи инструментов развертывания:  
    Автоматическая разметка дисков
    Установка пакетов
    Настройка сети, пользователей и сервисов
    Массовое копирование эталонных образов
Популярные инструменты:  
    Debootstrap  – минимальная установка Debian/Ubuntu без графического интерфейса.
    Kickstart (RHEL/CentOS/Fedora)  – автоматизирует установку через файл ks.cfg.
    Preseed (Debian/Ubuntu)  – аналог Kickstart для Debian-подобных систем.
    Clonezilla  – мощный инструмент клонирования дисков и массового развёртывания.
    dd , partclone , FSArchiver  – используются для создания и восстановления образов дисков.
     Автоматизированная установка ОС  
Автоматизация позволяет сократить время установки, избежать ошибок и обеспечить единые стандарты на всех устройствах. 
Преимущества:  
    Единообразие настроек
    Быстрая массовая установка
    Возможность удалённого развёртывания
    Минимизация человеческого фактор
Методы автоматизации:  
    Использование конфигурационных файлов (например, ks.cfg, preseed.cfg)
    PXE-загрузка — сетевая установка без USB/DVD
    NFS, HTTP, FTP — источники для загрузки пакетов и образов
Debootstrap  — это утилита для установки минимальной системы Debian  или Ubuntu  без использования стандартного установщика. 
Подходит для создания контейнеров, chroot-окружений или сборки минимального образа системы. 
Основные функции:  
    Загружает минимальные системные пакеты
    Разворачивает их в указанной директории
    Готовит среду для дальнейшей настройки
Принцип работы:  
    Скачивает ядро и базовые пакеты из официальных репозиториев.
    Распаковывает их в нужную директорию (например, /mnt/debian).
    После установки можно войти в систему через chroot и продолжить настройку.
Области применения:  
    Создание минимального образа для контейнеров (LXC, Docker)
    Развертывание систем на встроенном оборудовании
    Подготовка окружений для тестирования и отладки
Преимущества:  
    Полный контроль над установленными пакетами
    Подходит для создания кастомных образов
    Легко интегрируется в автоматизированные процессы
Недостатки:  
    Не подходит для массовой установки на рабочие станции
    Требует дополнительной настройки после установки
    Не устанавливает загрузчик и графическую оболочку
3.	Создайте резервные копии файлов:
· Настройте расписание выполнения резервного копирования с помощью crontab.
· Создайте скрипт на Bash, который будет выполнять резервное копирование любого файла или папки.
· Убедитесь, что резервные копии создаются согласно расписанию и сохраняются в нужных местах.
Sudo mkdir –p /backup (или без -p)
sudo chown $USER:$USER /backup
tar -czvf /backup/backup_$(date +%Y-%m-%d).tar.gz /etc
ls -lh /backup
nano ~/backup.sh

#!/bin/bash
BACKUP_DIR="/backup"
BACKUP_FILE="test_$(date +%Y-%m-%d).tar.gz"
tar -czf "$BACKUP_DIR/$BACKUP_FILE" /etc
ctl + x сохраняем типо
chmod +x ~/backup.sh
~/backup.sh
ls -lh /backup
crontab –e
1
10 * * * * ~/backup.sh
ctl + x сохраняем типо
crontab –l (это не цифра адын)
