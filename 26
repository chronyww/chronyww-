1.	Средства управления образами. Особенности управления образами. 
Управление образами  — это процесс создания, хранения, распространения и обновления предварительно настроенных шаблонов 
операционных систем или приложений (образов). Образы используются для быстрого и однотипного развертывания систем в серверных, облачных и контейнерных средах. 
Основные задачи управления образами:  
    Создание стандартных образов с нужным ПО и настройками.
    Централизованное хранение и контроль версий.
    Автоматизация обновлений и тестирования.
    Обеспечение безопасности и соответствия нормам.
    Масштабируемое развертывание на большое количество устройств.
Средства управления образами  
1. Облачные платформы 
    AWS AMI (Amazon Machine Image)  – образы для EC2-инстансов.
    Azure Shared Image Gallery  – централизованное хранение и репликация образов.
    GCP Compute Engine Custom Images  – пользовательские образы для облачных инстансов.
2. Инструменты для работы с контейнерами 
    Docker  – создание и хранение образов в Docker Hub, использование Dockerfile.
    Kubernetes (Helm Charts, ImagePullPolicy)  – управление образами в кластерах.
    Podman  – альтернатива Docker без необходимости запуска демона
3. Инструменты автоматизации 
    Packer (HashiCorp)  – создание одинаковых образов для разных платформ.
    Terraform  – управление инфраструктурой как кодом, включая образы.
    Ansible, Chef, Puppet  – автоматизация настройки систем после развёртывания.
Особенности управления образами Linux  
1. Минимизация размера образа  
    Использование легковесных дистрибутивов (например, Alpine Linux).
    Удаление ненужных пакетов и файлов.
    Оптимизация слоёв в Docker-образах.
2. Безопасность  
    Регулярные обновления для устранения уязвимостей.
    Использование подписанных образов для проверки целостности.
    Ограничение доступа к репозиториям образов.
3. Автоматизация тестирования 
    Проведение unit- и интеграционных тестов.
    Сканирование на уязвимости (например, Trivy).
    Внедрение CI/CD-пайплайнов для автоматического создания и тестирования образов.
Стратегии управления образами  
1. Централизованное хранение  
    Хранение всех образов в одном месте (сервер, облако).
    Удобство управления, обновления и контроля версий.
2. Версионирование  
    Каждый образ имеет уникальный идентификатор (версия, тег).
    Возможность отката к предыдущим версиям.
3. Автоматизация создания и обновления  
    Использование Packer, Ansible, Dockerfile.
    Настройка автоматических сборок и тестирования.
     
4. Безопасность и комплаенс  
    Регулярное сканирование на уязвимости.
    Поддержка стандартов (ISO 27001, GDPR, HIPAA и др.).
    Логирование действий над образами.
5. Географическое распространение  
    Репликация образов между регионами.
    Использование CDN для ускорения загрузки.
2.	Управление безопасностью. Угрозы безопасности клиентской ОС.
 Основные аспекты управления безопасностью в Linux: 
•	Аутентификация и контроль доступа – проверка подлинности пользователей и ограничение их действий.
o	Используются механизмы:
	PAM (Pluggable Authentication Modules)
	Kerberos (сетевая аутентификация с билетами)
	LDAP (централизованное управление учетными записями)
•	Контроль на уровне системы – изоляция процессов, защита от несанкционированного доступа.
o	SELinux , AppArmor , Firewalld 
•	Шифрование дисков и файлов – защита данных от кражи или просмотра.
o	LUKS , eCryptfs , EncFS 
•	Автоматизация безопасности – централизованное управление политиками безопасности.
o	Ansible , Puppet , SaltStack 
Угрозы безопасности клиентских ОС: 
Несанкционированный доступ и угрозы аутентификации 
•	Слабые пароли – легко подбираются перебором.
•	SSH-атаки – brute-force, использование украденных учетных данных.
•	Отсутствие двухфакторной аутентификации (2FA) – повышает риск компрометации.
•	Социальная инженерия – обман пользователя для получения учетных данных.
Уязвимости программного обеспечения 
•	Ошибки в коде приложений и ядра – могут привести к выполнению произвольного кода.
•	Переполнение буфера – позволяет злоумышленнику захватить систему.
•	Неправильная настройка сервисов – например, небезопасные разрешения файлов.
•	Отсутствие обновлений – известные уязвимости остаются незакрытыми.
Вредоносные программы и эксплойты 
•	Руткиты – скрывают своё присутствие и предоставляют удалённый доступ.
•	Трояны – маскируются под легитимное ПО.
•	Черви – распространяются через сеть.
•	Майнеры – используют ресурсы системы для добычи криптовалют.
•	Эксплойты – используют уязвимости для повышения привилегий или удаленного исполнения кода.
Сетевые угрозы и атаки 
•	MITM (Man-in-the-Middle) – перехват трафика между двумя сторонами.
o	ARP-spoofing, DNS-spoofing
•	Sniffing – анализ сетевого трафика (например, Wireshark).
•	DDoS-атаки – перегрузка сервера запросами.
•	Атаки на SSH и веб-серверы – SQL-инъекции, XSS, CSRF
2.5. Ошибки конфигурации и слабые политики безопасности 
•	Неправильно выставленные права доступа 
•	Доступ root через SSH 
•	Некорректные правила фаервола 
•	Неограниченный доступ к портам и сервисам 
2.6. Человеческий фактор и социальная инженерия 
•	Фишинг – поддельные сайты и письма для получения учетных данных.
•	Вишинг/смишинг – мошенничество по телефону или SMS.
•	Повторное использование паролей – если один аккаунт скомпрометирован, злоумышленник получает доступ ко всем.
•	Запуск команд из интернета без проверки 
•	Использование заражённых USB-устройств 
Меры защиты: 
•	Регулярное обновление системы и установленного ПО.
•	Настройка строгих политик паролей (через PAM).
•	Использование двухфакторной аутентификации.
•	Отключение входа под root через SSH.
•	Включение SELinux или AppArmor.
•	Настройка Firewalld / UFW для ограничения доступа.
•	Шифрование дисков (LUKS), домашних каталогов (eCryptfs) и облачных данных (EncFS).
•	Централизованное управление безопасностью через Ansible, Puppet или SaltStack.
•	Обучение пользователей основам информационной безопасности.
3.	Настройте DHCP-сервер так, чтобы он выдавал IP-адреса только определенным клиентам по их MAC-адресам.
Установите пакет DHCP-сервера на Linux-систему.
apt install isc-dhcp-server
Создайте конфигурационный файл с определением параметров сети и настроек DHCP-сервера.
Hostnamectl set-hostname aboltus; exec bash
nano /etc/default/isc-dhcp-server
INTERFACESv4=”ens4” выходим
nano /etc/dhcp/dhcpd.conf
раскоментировать authoritative
option domaın - name "au-team.irро";
option domain-name-servers 8.8.8.8; в самом низу пишем следующее:
subnet 172.16.4.0 netmask 255.255.255 240 {
range 172.16.4.2 172.16.4.10;
option routers 172.16.4.1;
}
Host aboltus {
Hardware Ethernet (mac адресс ens4 ищем через команду ip –c a (для даунов он оранжевым цветом));
Fixed-address (айпишник который выдем к примеру 172.16.4.4);
}
Ctrl + x (сохраняем)
systemctl enable--now isc-dhcp-server
systemctl restart isc-dhcp-server
systemctl status isc-dhcp-server смотрим работает 
(apt update –y)
(iptables –t nat –A POSTROUTING –j MASQUERADE)
(apt install iptables-persistent -y)
(перезагрузить пк что бы интернет встал на второй комп при подключении к нему + iptables –t nat –S для проверки стоит ли построутинг и маскарад)
переводим в nmtui соединение на клиенте в automatic
 Запустите DHCP-сервер и проверьте, что устройства в сети получают IP-адреса автоматически.
