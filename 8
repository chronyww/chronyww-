1.	Службы сетевого времени. Причины появления. 
Точное время играет важную роль в современных вычислительных
системах. Ошибки в синхронизации могут привести к проблемам в
безопасности, логировании событий, финансовых транзакциях и сетевых
коммуникациях.
Служба сетевого времени (NTP
обеспечивает синхронизацию системных часов компьютеров и сетевых
устройств по глобальным эталонным часам. Точное время критично для
работы сетей, систем логирования, аутентификации и распределенных
приложений.
До появления NTP
(до 1985 года) синхронизация времени в
компьютерных сетях была ограниченной и неточной.
Администраторы вручную задавали время на каждом компьютере.
Ошибки и отклонения накапливались со временем (дрейф часов).
В 1970-х годах появились первые сетевые протоколы, например:
Daytime Protocol (RFC 867, 1983) – передавал текущую дату и время в
текстовом формате или Time Protocol (RFC 868, 1983) – отправлял число
секунд с 1900 года. Эти протоколы не учитывали задержки сети, что
приводило к неточностям.
Некоторые системы получали время с центрального сервера, но не
умели корректировать его автоматически. Не было механизма компенсации
сетевых задержек.
Таким образом, до NTP синхронизация времени была хаотичной,
неточной и неэффективной.
В 1985 году Дэвид Миллс из Университета Делавэра разработал
Network Time Protocol (NTP), чтобы решить следующие проблемы:
Автоматическая синхронизация – исключает необходимость ручной
настройки.
Коррекция сетевых задержек – учитывает время прохождения
пакетов.
Иерархия серверов – создается структура из серверов с разными
уровнями точности (Stratum).
Устойчивость к сбоям – поддержка нескольких источников времени
для отказоустойчивости.

2.	Динамическая маршрутизация. Протоколы RIP и IGRP
Динамическая маршрутизация позволяет маршрутизаторам автоматически строить и обновлять, и оптимизировать маршруты. Это достигается за счёт обмена информацией между сетевыми устройствами, анализа текущей топологии сети и расчёта наилучших путей передачи данных в реальном времени. Первый подход основан на векторе расстояний (distance vector) - RIP, IGRP. В этой модели каждый маршрутизатор знает только о том, какие сети доступны
через его соседей, и с каким «расстоянием» до них. Это делает алгоритм
простым, но и подверженным недостаткам, например, образованию
маршрутных петель или медленной реакции на изменения. Такой подход
требует регулярной пересылки информации всем соседям, даже если
изменений не было.
RIP (Routing Information Protocol) — старейший протокол динамической маршрутизации, основанный на алгоритме вектора расстояния. Использует метрику «число хопов» (до 15), где лучший маршрут — с минимальным количеством переходов между маршрутизаторами. 
Как работает: 
Каждые 30 секунд маршрутизаторы обмениваются полными таблицами маршрутов с соседями. При обнаружении более коротких путей таблицы обновляются. Информация распространяется по цепочке. 
Недостатки: 
•	Ограничение в 15 хопов (свыше — сеть недоступна). 
•	Медленная сходимость (задержка при изменении топологии). 
•	Уязвимость к петлям маршрутизации и «счёту до бесконечности». 
•	Не учитывает пропускную способность, задержки и другие параметры.
Преимущества: 
•	Простота настройки. 
•	Минимальное потребление ресурсов. 
•	Подходит для малых сетей и обучения.
Однако в производственных и особенно в распределённых корпоративных сетях RIP почти не используется. 
IGRP (Interior Gateway Routing Protocol)  — проприетарный протокол динамической маршрутизации от Cisco, разработанный в 1980-х как альтернатива RIP. Использует алгоритм вектора расстояния, но учитывает несколько метрик: пропускную способность, задержку, надёжность, загрузку и MTU (по умолчанию — только первые две).   
Метрики объединяются в композитную с возможностью настройки весовых коэффициентов. Поддерживает до 255 хопов (против 15 у RIP), что делает его пригодным для крупных сетей. 
Обновления таблиц маршрутизации отправляются каждые 90 секунд. Применяются механизмы защиты от петель: Split Horizon, Poison Reverse, Hold-down таймеры. 
IGRP работает внутри автономной системы и является внутренним протоколом маршрутизации (IGP). Удобен в настройке, но устарел — заменён на EIGRP. Сейчас используется в учебных целях как этап развития сетевых технологий.
3.	Создать и настроить виртуальный коммутатор с «VLAN-ами» на виртуальной машине, используя Open vSwitch (OVS)

Создать два компика но вообще вланы можно настроить на одном компе
1 комп 172.16.4.1/28
2 комп 172.16.4.2/28
(apt update –y)
(iptables –t nat –A POSTROUTING –j MASQUERADE)
(apt install iptables-persistent -y)
(перезагрузить пк что бы интернет встал на второй комп при подключении к нему + iptables –t nat –S для проверки стоит ли построутинг и маскарад)
Все действия на первом компе делаются:
apt-get install openvswitch-switch
systemctl enable --now openvswitch-switch
ovs-vsctl add-br hq-sw
ovs-vsctl add-port hq-sw ens4 tag=100
(добавлять цифру в ens и tag= в зависимости от того сколько компов создаем но у нас два)
ovs-vsctl add-port hq-sw vlan100 tag=100 -- set interface vlan100 type=internal
systemctl restart openvswitch-switch
systemctl restart NetworkManager
ip link set hq-sw up
ip a add 172.16.4.1/28 dev vlan100
ip link set vlan100 up
ip –c –br a (там покажет включенные вланы)
пингуем влан 100 и все

