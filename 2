
ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ №  2_

1.	Управление безопасностью в Linux. Принципы управления безопасностью
Основные принципы управления безопасностью в Linux: 
1.	Минимизация привилегий 
o	Пользователи и процессы работают с минимальными необходимыми правами.
o	Это снижает риск повреждения системы при компрометации отдельного процесса или учетной записи.
2.	Разделение ролей 
o	Разграничение прав между обычными пользователями, администраторами и системными службами.
o	Использование sudo вместо постоянной работы от имени root.
3.	Централизованное управление 
o	Использование инструментов для единообразной настройки безопасности:
	LDAP – централизованное хранение учетных записей.
	Ansible , Puppet , SaltStack – автоматизация развертывания политик безопасности.
4.	Гибкая аутентификация 
o	Механизмы PAM (Pluggable Authentication Modules) позволяют гибко настраивать проверку подлинности.
o	Поддержка двухфакторной аутентификации, ограничений на попытки входа и других методов усиления безопасности.
5.	Контроль доступа 
o	Стандартные права доступа (owner/group/others).
o	Расширенные списки контроля доступа (ACL).
o	SELinux и AppArmor — системы мандатного контроля доступа, ограничивающие действия процессов и пользователей.
6.	Шифрование данных 
o	Шифрование дисков (LUKS ), файлов (eCryptfs , EncFS ) обеспечивает защиту информации даже при физическом доступе к носителю.
7.	Регулярные обновления 
o	Важно своевременно устанавливать обновления безопасности.
o	Использование пакетных менеджеров (apt, yum, dnf) и автоматических систем обновлений.
8.	Логирование и мониторинг 
o	Ведение журналов с помощью rsyslog, journalctl.
o	Анализ логов с помощью auditd, fail2ban, OSSEC.
9.	Сетевая безопасность 
o	Настройка брандмауэра (firewalld, iptables, nftables).
o	Ограничение открытых портов и использование шифрования (SSH, TLS).
10.	Обучение пользователей 
o	Борьба с человеческим фактором через обучение основам информационной безопасности.
o	Предотвращение социальной инженерии, фишинга, использования неизвестных USB-устройств.
2.	Удаленный доступ. Протокол удаленного доступа SSH
Тема: Службы удаленного рабочего стола
В современных IT-инфраструктурах удаленный доступ играет
ключевую роль, позволяя пользователям работать с корпоративными
ресурсами из любой точки мира. В Linux-среде удаленный доступ
используется для администрирования серверов, работы пользователей с
удаленными рабочими столами и приложениями, а также для организации
защищенного доступа через интернет.
Основные технологии удаленного доступа в Linux:
✅ SSH (Secure Shell) – безопасный доступ к командной строке
удаленной машины
SSH (Secure Shell) – основа удаленного администрирования Linux
SSH (Secure Shell) — это сетевой протокол, который позволяет
безопасно подключаться к удалённым серверам и управлять ими через
командную строку. В отличие от устаревшего Telnet, SSH использует
шифрование для защиты данных, предотвращая их перехват
злоумышленниками.
SSH является стандартом для администрирования Linux-серверов,
используемым как системными администраторами, так и разработчиками.
SSH работает по модели "клиент-сервер":
Клиент (SSH-клиент) – это программа, которая инициирует
соединение (например, ssh в Linux, PuTTY в Windows).
Сервер (SSH-сервер) – это удалённая машина с работающим SSH-
демоном (sshd), принимающим подключения.
Использование портов
По умолчанию SSH использует порт 22, но его можно изменить для
повышения безопасности.
Аутентификация в SSH
1 Аутентификация по паролю
Самый простой способ – ввести логин и пароль. Однако он менее
безопасен, так как:
Пароль можно подобрать с помощью атак "грубой силы" (brute force)
Пароли можно перехватить, если SSH настроен неправильно
Лучшее решение – отключить вход по паролю и использовать SSH-
ключи.
2 Аутентификация с использованием SSH-ключей
SSH-ключи обеспечивают более безопасный и удобный способ
аутентификации. Они работают по принципу асимметричного
шифрования:
Закрытый (private) ключ – хранится на клиенте
Открытый (public) ключ – добавляется на сервер в файл
~/.ssh/authorized_keys
✅ Преимущества SSH-ключей:
✅ Невозможно подобрать brute force-атакой
✅ Можно использовать без ввода пароля (удобно для автоматизации)
✅ Работает с двухфакторной аутентификацией (например, с YubiKey)
3 Двухфакторная аутентификация (2FA) в SSH
Дополнительную безопасность можно обеспечить с помощью 2FA.
Например, использование Google Authenticator или аппаратных ключей
YubiKey.
Основные возможности SSH
1 Удалённое подключение к серверу
2 Передача файлов по SSH (scp, sftp)
3 SSH-туннелирование (port forwarding)
4 Запуск удалённых команд
3.	Показать работу команд mkdir, chmod, cp, copy, mv, rm Создать файл «text1.txt» и переименовать его в командой строке в «text2.txt»
Создать директорию
Bash mkdir my_directory
Перейти в созданную директорию
Bash cd my_directory
Создать файл «text1.txt»
Bash touch text1.txt
Проверить права доступа к файлу
Bash ls -l text1.txt
Изменить права доступа к файлу
Bash chmod 644 text1.txt
Скопировать файл в ту же директорию под другим именем
Bash cp text1.txt text_copy.txt
Переименовать файл «text1.txt» в «text2.txt»
Bash mv text1.txt text2.txt
Удалить файл «text_copy.txt»
Bash rm text_copy.txt


